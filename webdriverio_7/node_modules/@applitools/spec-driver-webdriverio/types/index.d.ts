declare const _default: import('@applitools/types').SpecDriver<Driver, Driver, Element, Selector>;
export default _default;
export function isDriver(browser: any): browser is Driver;
export function isElement(element: any): element is Element;
export function isSelector(selector: any): selector is Selector;
export function transformDriver(driver: Driver): Driver;
export function transformElement(element: Element): Element;
export function transformSelector(selector: Selector | (string | { selector: string | Selector; type?: string; })): Selector;
export function extractSelector(element: Element): Selector;
export function isStaleElementError(error: any): boolean;
export function isEqualElements(_browser: Driver, element1: Element, element2: Element): Promise<boolean>;
export function executeScript(browser: Driver, script: string | ((arg: any) => any), arg?: any): Promise<any>;
export function mainContext(browser: Driver): Promise<Driver>;
export function parentContext(browser: Driver): Promise<Driver>;
export function childContext(browser: Driver, element: Element): Promise<Driver>;
export function findElement(browser: Driver, selector: Selector, parent?: Element): Promise<Applitools.WebdriverIO.Element>;
export function findElements(browser: Driver, selector: Selector, parent?: Element): Promise<Array<Applitools.WebdriverIO.Element>>;
export function getWindowSize(browser: Driver): Promise<import('@applitools/types').Size>;
export function setWindowSize(browser: Driver, size: import('@applitools/types').Size): Promise<void>;
export function getCookies(browser: Driver, context?: boolean): Promise<Array<import('@applitools/types').Cookie>>;
export function getCapabilities(browser: Driver): Promise<Record<string, any>>;
export function getTitle(browser: Driver): Promise<string>;
export function getUrl(browser: Driver): Promise<string>;
export function visit(browser: Driver, url: string): Promise<void>;
export function takeScreenshot(browser: Driver): Promise<string | Buffer>;
export function click(browser: Driver, element: Element | Selector): Promise<void>;
export function type(browser: Driver, element: Element | Selector, keys: string): Promise<void>;
export function hover(browser: Driver, element: Element | Selector): Promise<any>;
export function scrollIntoView(browser: Driver, element: Element | Selector, align: boolean): Promise<void>;
export function waitUntilDisplayed(browser: Driver, selector: Selector, timeout: number): Promise<void>;
export function getBarsHeight(browser: Driver): Promise<{ statusBarHeight: number; navigationBarHeight: number; }>;
export function getOrientation(browser: Driver): Promise<"portrait" | "landscape">;
export function getElementRegion(browser: Driver, element: Element): Promise<import('@applitools/types').Region>;
export function getElementAttribute(browser: Driver, element: Element, attr: string): Promise<string>;
export function getElementText(browser: Driver, element: Element): Promise<string>;
export function performAction(browser: Driver, steps: Array<any>): Promise<void>;
export function build(env: any): Promise<[Driver, () => Promise<void>]>;
export type Driver = Applitools.WebdriverIO.Browser & { __applitoolsBrand?: never; };
export type Element = (Applitools.WebdriverIO.Element | { ELEMENT: string; } | { 'element-6066-11e4-a52e-4f735466cecf': string; }) & { __applitoolsBrand?: never; };
export type Selector = (Applitools.WebdriverIO.Selector | { using: string; value: string; }) & { __applitoolsBrand?: never; };
